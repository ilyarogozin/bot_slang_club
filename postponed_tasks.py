import datetime
import time

from sqlalchemy import and_, extract, func
from sqlalchemy.sql import exists
from telegram import Update
from telegram.ext import CallbackContext

from constants import CHANNEL_ID, CHAT_ID, MODERATOR_IDS, MONTHS, TEXT_INVITATION
from database import Session, Subscription, User
from utils import create_invite_link, create_session, kick_user_from_channel, logger


# –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def handle_overlapping_subscriptions(updater) -> None:
    with create_session() as session:
        try:
            # –ü–æ–ª—É—á–∏–º id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_user_ids = session.query(User.id).with_for_update().all()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
            all_user_ids = [user_id[0] for user_id in all_user_ids]

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –¥–≤—É—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
            def is_overlap_or_adjacent(start1, end1, start2, end2):
                return max(start1, start2) <= min(end1, end2) + datetime.timedelta(
                    days=1
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id in all_user_ids:
                subscriptions = (
                    session.query(Subscription)
                    .with_for_update()
                    .filter(Subscription.user_id == user_id)
                    .order_by(Subscription.start_datetime)
                    .all()
                )
                overlapping_subscriptions = []
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –ø–æ–¥–ø–∏—Å–æ–∫
                for i in range(len(subscriptions)):
                    for j in range(i + 1, len(subscriptions)):
                        if is_overlap_or_adjacent(
                            subscriptions[i].start_datetime,
                            subscriptions[i].end_datetime,
                            subscriptions[j].start_datetime,
                            subscriptions[j].end_datetime,
                        ):
                            overlapping_subscriptions.append(
                                (subscriptions[i], subscriptions[j])
                            )
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–æ–¥–ø–∏—Å–∫–∏
                for sub1, sub2 in overlapping_subscriptions:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                    combined_start = min(sub1.start_datetime, sub2.start_datetime)
                    combined_end = max(sub1.end_datetime, sub2.end_datetime)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                    sub1.start_datetime = combined_start
                    sub1.end_datetime = combined_end
                    # –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    session.delete(sub2)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session.commit()
        except Exception as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ handle_overlapping_subscriptions: {str(error)}")
            session.rollback()
        finally:
            Session.remove()  # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    return None


# –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 26 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
def request_feedback_from_all_users(updater) -> None:
    bot = updater.bot
    text = (
        "–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∞—Ç—å —Å–ª–µ–Ω–≥-–∫–ª—É–± –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! "
        "–ò –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:)\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, "
        "–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'!\n"
        "–ó–∞—Ä–∞–Ω–µ–µ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º üòâ"
    )
    with create_session() as session:
        telegram_ids = session.query(User.telegram_id).all()
        for telegram_id in telegram_ids:
            chat_id = telegram_id[0]
            if chat_id:
                try:
                    bot.send_message(chat_id=chat_id, text=text, parse_mode="markdown")
                except Exception as error:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id {chat_id}: {error}"
                    )
            else:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id: None")
    Session.remove()
    return None


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º 25 —á–∏—Å–ª–∞
# –≤ 17:00 MSK –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def get_first_reminder_to_renew_the_subscription(updater) -> None:
    bot = updater.bot
    text = (
        "–ú–∞ —Ñ—Ä–µ–Ω–¥, –ø—Ä–∏–≤–µ—Ç!ü§ó\n"
        "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–æ–≤—ã–π –º–µ—Å—è—Ü, "
        "–∞ –∑–Ω–∞—á–∏—Ç –∏ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ª–µ–Ω–≥-–∫–ª—É–± ¬´Sensei, for real!?¬ª ü§ç\n\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–∞–º–æ–º —Å–ª–µ–Ω–≥–æ–≤–æ–º –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å "
        "—Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        "https://vasilisa-slang.ru/\n\n"
        "–í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–ª–µ–Ω–≥-–∫–ª—É–±–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∏—Ç —Ç–µ–±—è –∏–∑ —Å–ª–µ–Ω–≥-–∫–ª—É–±–∞.ü•∫"
    )
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    now = datetime.datetime.now()
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    last_day_of_month = datetime.datetime(
        now.year, now.month + 1, 1
    ) - datetime.timedelta(days=1)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    with create_session() as session:
        telegram_ids = (
            session.query(User.telegram_id)
            .join(Subscription)
            .filter(
                and_(
                    extract("year", Subscription.end_datetime) == now.year,
                    extract("month", Subscription.end_datetime) == now.month,
                    extract("day", Subscription.end_datetime) == last_day_of_month.day,
                )
            )
            .all()
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for telegram_id in telegram_ids:
            if telegram_id[0]:
                try:
                    bot.send_message(
                        chat_id=telegram_id[0], text=text, parse_mode="markdown"
                    )
                except Exception as error:
                    logger.error(
                        "–ó–∞–¥–∞—á–∞ get_first_reminder_to_renew_the_subscription\n"
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å telegram_id {telegram_id}: {error}"
                    )
            else:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π telegram_id: None")
    Session.remove()
    return None


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ 12:00 MSK
def get_second_reminder_to_renew_the_subscription(updater) -> None:
    bot = updater.bot
    renew_message = (
        "–ú–∞ —Ñ—Ä–µ–Ω–¥, –ø—Ä–∏–≤–µ—Ç!:)\n"
        "–°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ "
        "—Å–ª–µ–Ω–≥-–∫–ª—É–±–∞ ¬´Sensei, for real!?¬ª\n\n"
        "–ù–µ –∑–∞–±—É–¥—å [–æ–ø–ª–∞—Ç–∏—Ç—å](https://vasilisa-slang.ru/), –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å "
        "–≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–πü•≥"
    )
    prolong_message = (
        "–ú–∞ —Ñ—Ä–µ–Ω–¥, –ø—Ä–∏–≤–µ—Ç!üôÇ\n"
        "–ù–µ–¥–∞–≤–Ω–æ —Ç—ã –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–≥–æ "
        "—Å–ª–µ–Ω–≥-–∫–ª—É–±–∞ ¬´Sensei, for real!!?¬ª, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ —Ç—ã –µ–≥–æ –ø–æ–∫–∏–Ω—É–ª.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ –≤–∑—è–ª –ø–∞—É–∑—É, –∞ —Ç–µ–ø–µ—Ä—å –≤–Ω–æ–≤—å —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è "
        "–∫ –Ω–∞—à–µ–º—É –∫–æ–º–º—å—é–Ω–∏—Ç–∏, —Ç–æ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: "
        "https://vasilisa-slang.ru/"
    )
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    now = datetime.datetime.now()
    today = now.date()
    with create_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ telegram_id –ø–æ–¥–ø–∏—Å–æ–∫, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è —Å–µ–≥–æ–¥–Ω—è
        renew_ids = (
            session.query(User.telegram_id)
            .join(Subscription)
            .filter(func.date(Subscription.end_datetime) == today)
            .all()
        )
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        ids_without_subscriptions = (
            session.query(User.telegram_id)
            .filter(~exists().where(Subscription.user_id == User.id))
            .all()
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for telegram_id in renew_ids:
            if telegram_id[0]:
                try:
                    bot.send_message(
                        chat_id=telegram_id[0],
                        text=renew_message,
                        parse_mode="markdown",
                    )
                except Exception as error:
                    logger.error(
                        "–ó–∞–¥–∞—á–∞ get_second_reminder_to_renew_the_subscription\n"
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å telegram_id {telegram_id}: {error}"
                    )
            else:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π telegram_id: None")
        for telegram_id in ids_without_subscriptions:
            bot.send_message(chat_id=telegram_id[0], text=prolong_message)
            if telegram_id[0]:
                try:
                    bot.send_message(chat_id=telegram_id[0], text=renew_message)
                except Exception as error:
                    logger.error(
                        "–ó–∞–¥–∞—á–∞ get_second_reminder_to_renew_the_subscription\n"
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å telegram_id {telegram_id}: {error}"
                    )
            else:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π telegram_id: None")
    Session.remove()
    return None


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –≤ 15:00 –ø–æ MSK
def get_first_reminder_to_join_the_club(updater) -> None:
    bot = updater.bot
    with create_session() as session:
        telegram_ids = session.query(User.telegram_id).all()
        text = (
            "–ö–∞–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ—Ç —Å–ª–µ–Ω–≥-–∫–ª—É–±–∞ ¬´Sensei, for real!?¬ª –Ω–∞–ø–æ–º–∏–Ω–∞—é "
            "–æ —Ç–æ–º, —á—Ç–æ –µ—Å–ª–∏ —Ç—ã –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ "
            "–≤–æ–π—Ç–∏ –≤ —Å–ª–µ–Ω–≥-–∫–ª—É–±, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥–±–æ—Ä–∫—É.\n\n"
            "‚ùóÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Å–ª–µ–Ω–≥-–∫–ª—É–±–µ "
            "(–¥–∞, —Å–µ–π—á–∞—Å –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —Ç—ã —Å –Ω–∞–º–∏ –≤–ø–µ—Ä–≤—ã–µü´Ç)\n\n"
            "–ù—É –∞ –µ—Å–ª–∏ —Ç—ã –µ—â—ë –¥—É–º–∞–µ—à—å, –∫–æ–≥–¥–∞ –Ω–∞—á–∞—Ç—å —Å–≤–æ—é —Å–ª–µ–Ω–≥–æ–≤—É—é –∂–∏–∑–Ω—å, —Ç–æ —Å–µ–π—á–∞—Å "
            "—Å–∞–º–æ–µ –≤—Ä–µ–º—è, –≤–µ–¥—å —Ç—ã –µ—â–µ —É—Å–ø–µ–≤–∞–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∫ –Ω–∞—à–µ–º—É "
            "–∫–æ–º—å—é–Ω–∏—Ç–∏.\n\n"
            "–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:\n"
            "- [–æ–ø–ª–∞—Ç–∏—Ç—å](https://vasilisa-slang.ru/) —Å–ª–µ–Ω–≥-–∫–ª—É–±\n"
            "- —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—èü§ñ\n\n"
            f"–û–ø–ª–∞—Ç—ã –Ω–∞ {MONTHS[datetime.datetime.now().month][0]} –∑–∞–∫—Ä–æ—é—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è –≤ 18:00. "
            "–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø–ª–∞—Ç –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–π –ø–æ—Å—Çü§ó\n\n"
            "–ñ–¥—É —Ç–µ–±—è‚ú®"
        )
        for telegram_id in telegram_ids:
            chat_id = telegram_id[0]
            if chat_id:
                try:
                    bot.send_message(chat_id=chat_id, text=text, parse_mode="markdown")
                except Exception as error:
                    logger.error(
                        "–ó–∞–¥–∞—á–∞ get_first_reminder_to_join_the_club\n"
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id {chat_id}: {error}"
                    )
            else:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id: None")
    Session.remove()
    return None


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –≤ 17:00 –ø–æ MSK
def get_second_reminder_to_join_the_club(updater) -> None:
    bot = updater.bot
    with create_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º subscription_link
        ids_with_subscriptions = (
            session.query(User.telegram_id)
            .filter(exists().where(Subscription.user_id == User.id))
            .all()
        )
        text = (
            "–ö–∞–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ—Ç —Å–ª–µ–Ω–≥-–∫–ª—É–±–∞ ¬´Sensei, for real!?¬ª, —Ö–æ—á—É "
            "—Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –º–æ—ë–º –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ —Ç—ã –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ "
            "–ø—Ä–∏—á–∏–Ω–∞–º –Ω–µ –æ–±—Ä–∞—Ç–∏–ª –Ω–∞ –Ω–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–±—ã–ª –æ –Ω—ë–º, "
            "–±—É–¥—É—á–∏ –∑–∞–Ω—è—Ç—ã–º –≤–∞–∂–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏.\n\n"
            "–û–Ω–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–æ–≤—Ä–µ–º—è [–≤—Å—Ç—É–ø–∏—Ç—å](https://vasilisa-slang.ru/) –≤ —Å–ª–µ–Ω–≥-–∫–ª—É–± –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å "
            "–Ω–∏ –∫–∞–ø–µ–ª—å–∫–∏ —Å–º–µ—à–Ω–æ–≥–æ –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ü§ó\n\n"
            "–ñ–¥—É —Ç–µ–±—è‚ú®"
        )
        for telegram_id in ids_with_subscriptions:
            if telegram_id[0]:
                try:
                    bot.send_message(
                        chat_id=telegram_id[0], text=text, parse_mode="markdown"
                    )
                except Exception as error:
                    logger.error(
                        "–ó–∞–¥–∞—á–∞ get_second_reminder_to_join_the_club\n"
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å telegram_id {telegram_id}: {error}"
                    )
            else:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id: None")
    Session.remove()
    return None


# –ü—Ä–æ–≤–µ—Ä—è–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ 1–æ–≥–æ —á–∏—Å–ª–∞ –≤ 18:10 MSK
def check_subscription_validity(updater) -> None:
    bot = updater.bot
    with create_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            expired_subscriptions = (
                session.query(Subscription)
                .with_for_update()
                .filter(Subscription.end_datetime < datetime.datetime.now())
                .all()
            )
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            for subscription in expired_subscriptions:
                if subscription.subscription_link:
                    try:
                        bot.revoke_chat_invite_link(
                            CHANNEL_ID, subscription.subscription_link
                        )
                    except Exception as error:
                        logger.error(
                            "–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–æ–∑–≤–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª—É–± —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
                            f"{subscription.user.phone_number}, "
                            "–≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                            f"Error: {error}"
                        )
                    try:
                        bot.revoke_chat_invite_link(CHAT_ID, subscription.chat_link)
                    except Exception as error:
                        logger.error(
                            "–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–æ–∑–≤–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç-–±–æ–ª—Ç–∞–ª–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
                            f"{subscription.user.phone_number}, "
                            "–≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                            f"Error: {error}"
                        )
                session.delete(subscription)
                # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ —á–∞—Ç–∞-–±–æ–ª—Ç–∞–ª–∫–∏
                kick_user_from_channel(bot, subscription.user.telegram_id, CHANNEL_ID)
                kick_user_from_channel(bot, subscription.user.telegram_id, CHAT_ID)
            # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session.commit()
        except Exception as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ check_subscription_validity: {str(error)}")
            session.rollback()
        finally:
            Session.remove()
    return None


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã–º –≤ 12:00 MSK
def send_invite_link(updater) -> None:
    bot = updater.bot
    text_prolonged = (
        "–ú–∞ —Ñ—Ä–µ–Ω–¥, –ø—Ä–∏–≤–µ—Ç! ‚ú®\n\n"
        "–°–µ–≥–æ–¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ª–µ–Ω–≥-–∫–ª—É–± **¬´Sensei, for real!?¬ª**\n\n"
        "–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç, —á—Ç–æ –∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –º–µ—Å—è—Ü–µ.\n\n"
        "Make the most of it ‚ô•Ô∏è"
    )
    with create_session() as session:
        try:
            now = datetime.datetime.utcnow()
            yesterday = now - datetime.timedelta(days=1)
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            new_subscriptions = (
                session.query(Subscription, User.telegram_id)
                .with_for_update()
                .join(User, Subscription.user_id == User.id)
                .filter(Subscription.start_datetime > yesterday)
                .all()
            )
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            prolonged_users = (
                session.query(User.telegram_id, Subscription)
                .with_for_update()
                .join(Subscription, User.id == Subscription.user_id)
                .filter(
                    and_(
                        Subscription.start_datetime
                        < yesterday,  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –¥–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
                        Subscription.end_datetime
                        > now,  # –ü–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
                    )
                )
                .all()
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for subscription, telegram_id in new_subscriptions:
                # –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç—ã –≤ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç-–±–æ–ª—Ç–∞–ª–∫—É
                invite_link = create_invite_link(
                    bot, subscription.end_datetime, CHANNEL_ID
                )
                time.sleep(1)
                chat_link = create_invite_link(bot, subscription.end_datetime, CHAT_ID)
                time.sleep(1)
                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–Ω–≤–∞–π—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if invite_link and chat_link:
                    subscription.subscription_link = invite_link
                    subscription.chat_link = chat_link
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω–≤–∞–π—Ç–æ–º
                    try:
                        bot.send_message(
                            chat_id=telegram_id,
                            text=TEXT_INVITATION.format(
                                invite_link=invite_link, chat_link=chat_link
                            ),
                        )
                    except Exception as error:
                        logger.error(
                            "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–¥–∞—á–∏ send_invite_link"
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {error}"
                        )
                else:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Åhat_link –∏–ª–∏ invite_link –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º id: {telegram_id}\n"
                        "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–¥–∞—á–µ send_invite_link"
                    )
            for telegram_id, subscription in prolonged_users:
                if not subscription.chat_link:
                    chat_link = create_invite_link(
                        bot, subscription.end_datetime, CHAT_ID
                    )
                    subscription.chat_link = chat_link
                try:
                    bot.send_message(
                        chat_id=telegram_id, text=text_prolonged, parse_mode="markdown"
                    )
                except Exception as error:
                    logger.error(
                        "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–¥–∞—á–∏ send_invite_link"
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {error}"
                    )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session.commit()
        except Exception as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ send_invite_link: {str(error)}")
            session.rollback()
        finally:
            Session.remove()
    return None


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º, –ø—Ä–æ–¥–ª–∏–≤—à–∏–º –ø–æ–¥–ø–∏—Å–∫—É, –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ-–±–æ–ª—Ç–∞–ª–∫–µ –≤ 12:05 MSK
def notify_about_new_chat(updater) -> None:
    bot = updater.bot
    notification_about_chat = (
        "–ú–∞ —Ñ—Ä–µ–Ω–¥, –ø—Ä–∏–≤–µ—Ç!:)\n\n"
        "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—éü™Ñ\n"
        "–í–∞–∂–Ω–æ–µ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–µ‚ùóÔ∏è\n\n"
        "–¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å —á–∞—Ç –∫–ª—É–±–∞, –≥–¥–µ –º—ã –º–æ–∂–µ–º —Å —Ç–æ–±–æ–π –∏ —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–ª—É–±–∞ –æ–±—â–∞—Ç—å—Å—è!\n"
        "–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∏ –≤—Å—Ç—É–ø–∞–π))\n\n"
        "–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç –∫–ª—É–±–∞ ¬´Sensei, for real!?¬ª:  {chat_link}\n\n"
        "–ñ–¥—É —Ç–µ–±—è ‚ú®"
    )
    with create_session() as session:
        try:
            now = datetime.datetime.utcnow()
            yesterday = now - datetime.timedelta(days=1)
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            prolonged_users = (
                session.query(User.telegram_id, Subscription)
                .join(Subscription, User.id == Subscription.user_id)
                .filter(
                    and_(
                        Subscription.start_datetime
                        < yesterday,  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –¥–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
                        Subscription.end_datetime
                        > now,  # –ü–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
                    )
                )
                .all()
            )
            for telegram_id, subscription in prolonged_users:
                if not telegram_id:
                    continue
                if not subscription.chat_link:
                    chat_link = create_invite_link(
                        bot, subscription.end_datetime, CHAT_ID
                    )
                    if not chat_link:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è {telegram_id}")
                        continue
                    subscription.chat_link = chat_link
                try:
                    bot.send_message(
                        chat_id=telegram_id,
                        text=notification_about_chat.format(
                            chat_link=subscription.chat_link
                        ),
                        parse_mode="markdown",
                    )
                except Exception as error:
                    logger.error(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ notify_about_new_chat "
                        f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–ª–µ–≥—Ä–∞–º id: {telegram_id}\n"
                        f"–û—à–∏–±–∫–∞: {str(error)}"
                    )
            session.commit()
        except Exception as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ notify_about_new_chat: {str(error)}")
            session.rollback()
        finally:
            Session.remove()
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
def test_postponed_task(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    if update.message.from_user.id not in MODERATOR_IDS:
        update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        return None
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = context.args
    if len(args) != 1:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /test_postponed_task –Ω–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–¥–∞—á–∏\n\n"
            "–û–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—Å–µ—Ö –∑–∞–¥–∞—á:\n\n"
            "request_feedback_from_all_users - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "get_first_reminder_to_renew_the_subscription - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ 25 —á–∏—Å–ª–∞ –≤ 17:00 MSK\n\n"
            "get_second_reminder_to_renew_the_subscription - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –≤ 12:00 MSK\n\n"
            "get_first_reminder_to_join_the_club - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–ª—É–± –ø–æ —Å—Å—ã–ª–∫–µ 1–æ–≥–æ —á–∏—Å–ª–∞ –≤ 16:00 MSK\n\n"
            "get_second_reminder_to_join_the_club - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–ª—É–± –ø–æ —Å—Å—ã–ª–∫–µ 1–æ–≥–æ —á–∏—Å–ª–∞ –≤ 18:00 MSK\n\n"
            "check_subscription_validity - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–∫ 1–æ–≥–æ —á–∏—Å–ª–∞ –≤ 18:00 MSK\n\n"
            "send_invite_link - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å–µ–º –Ω–æ–≤—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º 1–æ–≥–æ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –≤ 12:00 MSK, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ\n\n"
            "handle_overlapping_subscriptions - –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ –æ–¥–∏–Ω –¥–µ–Ω—å"
        )
        return None
    task_name = args[0]
    if task_name == "request_feedback_from_all_users":
        request_feedback_from_all_users(context)
    elif task_name == "get_first_reminder_to_renew_the_subscription":
        get_first_reminder_to_renew_the_subscription(context)
    elif task_name == "get_second_reminder_to_renew_the_subscription":
        get_second_reminder_to_renew_the_subscription(context)
    elif task_name == "get_first_reminder_to_join_the_club":
        get_first_reminder_to_join_the_club(context)
    elif task_name == "get_second_reminder_to_join_the_club":
        get_second_reminder_to_join_the_club(context)
    elif task_name == "check_subscription_validity":
        check_subscription_validity(context)
    elif task_name == "send_invite_link":
        send_invite_link(context)
    elif task_name == "handle_overlapping_subscriptions":
        handle_overlapping_subscriptions(context)
    elif task_name == "notify_about_new_chat":
        notify_about_new_chat(context)
    else:
        update.message.reply_text("–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return None
    update.message.reply_text("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    return None
