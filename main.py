import datetime
from io import BytesIO

import pandas as pd
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv
from flask import Flask, jsonify, request
from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import (
    CallbackContext,
    CommandHandler,
    ConversationHandler,
    Dispatcher,
    Filters,
    MessageHandler,
    Updater,
)

from constants import (
    CHANNEL_ID,
    DOMAIN,
    MOSCOW_TZ,
    PAYMENT_KEY,
    PAYMENT_WEBHOOK,
    PHONE_NUMBER_REGEX,
    TELEGRAM_WEBHOOK,
    TOKEN,
)
from database import Review, Session, User
from manager_commands import (
    change_phone_number,
    delete_subscription,
    delete_user,
    get_all_reviews,
    get_all_users,
    give_free_subscription,
    send_invite_link_personally,
    set_subscription_end_at,
)
from postponed_tasks import (
    check_subscription_validity,
    get_first_reminder_to_join_the_club,
    get_first_reminder_to_renew_the_subscription,
    get_second_reminder_to_join_the_club,
    get_second_reminder_to_renew_the_subscription,
    handle_overlapping_subscriptions,
    notify_about_new_chat,
    request_feedback_from_all_users,
    send_invite_link,
    test_postponed_task,
)
from user_commands import (
    get_demo_version_of_club,
    get_invitation,
    get_subscription_link,
    get_subscription_period,
    get_technical_support,
    show_linked_phone_number,
    write_review,
)
from utils import create_session, logger, update_subscription

app = Flask(__name__)
updater = Updater(
    TOKEN, use_context=True, request_kwargs={"connect_timeout": 10, "read_timeout": 20}
)
dispatcher = updater.dispatcher


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ —Å –≤–µ–±—Ö—É–∫–∞
@app.route(f"/{TELEGRAM_WEBHOOK}/", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), dispatcher.bot)
    dispatcher.process_update(update)
    return "ok"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç Tilda
@app.route(f"/{PAYMENT_WEBHOOK}/", methods=["POST"])
def payment_webhook():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        logger.info(f"Got webhook request headrs: {request.headers}")
        payment_key = request.headers.get("API-Key")
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á —Å –æ–∂–∏–¥–∞–µ–º—ã–º
        if payment_key != PAYMENT_KEY:
            return jsonify({"status": "failure", "message": "Invalid key"}), 400
        data = request.json
        logger.info(f"Got webhook request body: {data}")
        phone_number = data.get("Phone")
        if not phone_number:
            return (
                jsonify(
                    {
                        "status": "failure",
                        "message": "–í —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    }
                ),
                400,
            )
        amount_months = data.get("payment").get("products")[
            0].get("name").split()[-2]
        if not amount_months:
            return (
                jsonify(
                    {
                        "status": "failure",
                        "message": "–í —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤.",
                    }
                ),
                400,
            )
        _, start_month, start_year = data.get("month").split("-")
        if not start_month or not start_year:
            return (
                jsonify(
                    {
                        "status": "failure",
                        "message": "–í —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏.",
                    }
                ),
                400,
            )
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏—è–º–∏
        update_subscription(
            int(amount_months), phone_number, int(start_month), int(start_year)
        )
    except Exception as error:
        logger.error(f"payment webhook error: {str(error)}")
        return jsonify({"status": "failure", "message": str(error)}), 500
    return jsonify({"status": "success", "message": "–£—Å–ø–µ—à–Ω–æ."}), 200


# –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –æ—à–∏–±–æ–∫, –≤—ã–∑–≤–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
def error(update: Update, context: CallbackContext) -> None:
    logger.warning('Update "%s" caused error "%s"', update, context.error)
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π-–¥–µ–π—Å—Ç–≤–∏–π
def handle_text(update: Update, context: CallbackContext) -> None:
    try:
        user_text = update.message.text
        # –ï—Å–ª–∏ –∂–¥–µ–º –æ—Ç–∑—ã–≤
        if context.user_data.get("awaiting_review"):
            if user_text in {
                "-",
                "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üèÅ",
                "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ üïë",
                "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä üì≤",
                "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçüèº",
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è",
            }:
                update.message.reply_text("–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω—ë–Ω.")
            else:
                with create_session() as session:
                    telegram_id = update.message.from_user.id
                    user = (
                        session.query(User)
                        .filter(User.telegram_id == telegram_id)
                        .first()
                    )
                    new_review = Review(review_text=user_text, user_id=user.id)
                    session.add(new_review)
                    session.commit()
                Session.remove()
                update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
            context.user_data["awaiting_review"] = False
            return None

        if PHONE_NUMBER_REGEX.match(user_text):
            get_subscription_link(update, context, user_text)
        if user_text == "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üèÅ":
            get_subscription_link(update, context)
        elif user_text == "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ üïë":
            get_subscription_period(update, context)
        elif user_text == "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä üì≤":
            show_linked_phone_number(update, context)
        elif user_text == "–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —Å–ª–µ–Ω–≥-–∫–ª—É–±–∞ üñºÔ∏è":
            get_demo_version_of_club(update, context)
        elif user_text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçüèº":
            write_review(update, context)
        elif user_text == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è":
            get_technical_support(update, context)
    except Exception as error:
        logger.error(str(error))
        update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    contact_keyboard = KeyboardButton(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìû", request_contact=True
    )
    keyboard = [
        ["–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üèÅ", "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ üïë"],
        [contact_keyboard, "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä üì≤"],
        ["–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçüèº", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è"],
        ["–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —Å–ª–µ–Ω–≥-–∫–ª—É–±–∞ üñºÔ∏è"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard)
    update.message.reply_text(
        "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
        "+7, –ª–∏–±–æ —Å –¥—Ä—É–≥–∏–º –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "
        "—Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —É—Å–ª—É–≥–∏.",
        reply_markup=reply_markup,
    )
    return None


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def handle_contact(update: Update, context: CallbackContext) -> None:
    contact = update.message.contact
    if contact is not None:
        phone_number = contact.phone_number
        if phone_number[0] != "+":
            phone_number = "+" + phone_number
        get_subscription_link(update, context, phone_number)
    return None


def main() -> None:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    # webhook_url = f"https://{DOMAIN}/{TELEGRAM_WEBHOOK}/"
    # updater.bot.setWebhook(webhook_url)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    text_handler = MessageHandler(
        Filters.text & ~Filters.command & ~Filters.regex("#"), handle_text
    )
    start_handler = CommandHandler("start", start)
    handler_free_subscription = CommandHandler(
        "give_free_subscription", give_free_subscription
    )
    handler_delete_subscription = CommandHandler(
        "delete_subscription", delete_subscription
    )
    handler_change_phone_number = CommandHandler(
        "change_phone_number", change_phone_number
    )
    handler_get_all_reviews = CommandHandler(
        "get_all_reviews", get_all_reviews)
    handler_get_all_users = CommandHandler("get_all_users", get_all_users)
    get_invitation_handler = CommandHandler("get_invitation", get_invitation)
    test_postponed_task_handler = CommandHandler(
        "test_postponed_task", test_postponed_task
    )
    set_subscription_end_at_handler = CommandHandler(
        "set_subscription_end_at", set_subscription_end_at
    )
    send_invite_link_personally_handler = CommandHandler(
        "send_invite_link_personally", send_invite_link_personally
    )
    delete_user_handler = CommandHandler("delete_user", delete_user)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    contact_handler = MessageHandler(Filters.contact, handle_contact)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏
    dispatcher.add_error_handler(error)

    dispatcher.add_handler(delete_user_handler)
    dispatcher.add_handler(send_invite_link_personally_handler)
    dispatcher.add_handler(set_subscription_end_at_handler)
    dispatcher.add_handler(test_postponed_task_handler)
    dispatcher.add_handler(contact_handler)
    dispatcher.add_handler(text_handler)
    dispatcher.add_handler(get_invitation_handler)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(handler_get_all_users)
    dispatcher.add_handler(handler_get_all_reviews)
    dispatcher.add_handler(handler_change_phone_number)
    dispatcher.add_handler(handler_delete_subscription)
    dispatcher.add_handler(handler_free_subscription)

    scheduler = BackgroundScheduler(timezone=MOSCOW_TZ)

    # –ó–∞–¥–∞—á–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ 26-–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 14:00 MSK
    scheduler.add_job(
        request_feedback_from_all_users,
        "cron",
        day=26,
        hour=14,
        minute=0,
        args=[updater],
    )
    # –ó–∞–¥–∞—á–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞
    # 25-–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 17:00 MSK
    scheduler.add_job(
        get_first_reminder_to_renew_the_subscription,
        "cron",
        day=25,
        hour=17,
        minute=0,
        args=[updater],
    )
    # –ó–∞–¥–∞—á–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
    # —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00 MSK
    scheduler.add_job(
        get_second_reminder_to_renew_the_subscription,
        "cron",
        day="last",
        hour=12,
        minute=0,
        args=[updater],
    )
    # –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 16:00 MSK
    scheduler.add_job(
        get_first_reminder_to_join_the_club,
        "cron",
        day=1,
        hour=16,
        minute=0,
        args=[updater],
    )
    # –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 18:00 MSK
    scheduler.add_job(
        get_second_reminder_to_join_the_club,
        "cron",
        day=1,
        hour=18,
        minute=0,
        args=[updater],
    )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 18:00 MSK
    scheduler.add_job(
        check_subscription_validity,
        "cron",
        day=1,
        hour=18,
        minute=0,
        args=[updater],
    )
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–∞–π—Ç–∞ –Ω–æ–≤—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ
    # –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã–º –Ω–∞ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00 MSK
    scheduler.add_job(
        send_invite_link,
        "cron",
        day=1,
        hour=12,
        minute=0,
        args=[updater],
    )
    # –ó–∞–¥–∞—á–∞ –¥–ª—è —Å–ª–∏—è–Ω–∏—è –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
    scheduler.add_job(
        handle_overlapping_subscriptions,
        "interval",
        minutes=10,
        args=[updater],
    )
    # –ó–∞–¥–∞—á–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ-–±–æ–ª—Ç–∞–ª–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–¥–ª–∏–≤—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫—É
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: 1 —Å–µ–Ω—Ç—è–±—Ä—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –≤ 12:01 MSK
    execution_time = datetime.datetime(2024, 9, 1, 12, 1)
    scheduler.add_job(
        notify_about_new_chat,
        "date",
        run_date=execution_time,
        args=[updater],
        replace_existing=True,
    )

    scheduler.start()
    updater.start_polling()
    updater.idle()
    app.run(port=5001, debug=False)


if __name__ == "__main__":
    main()
