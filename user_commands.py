import datetime
from typing import Optional

from sqlalchemy import asc
from telegram import Update
from telegram.ext import CallbackContext

from constants import (
    CHANNEL_ID,
    CHAT_ID,
    LINK_COMING_SOON,
    TEXT_INVITATION,
    THESE_ARE_YOUR_LINKS,
)
from database import Session, Subscription, User
from utils import create_invite_link, create_session, logger


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É üèÅ'
def get_subscription_link(
    update: Update, context: CallbackContext, phone_number: Optional[str] = None
) -> None:
    not_found_text = (
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –≤–∏–∂—É –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üôÅ\n\n"
        "–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –ø–æ–¥–æ–∂–¥–∞–ª 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å "
        "–±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–ø—É—Å—Ç–∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á—É—Ç—å –ø–æ–∑–∂–µ.\n\n"
        "–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –±–æ—Ç –≤—Å–µ –∂–µ –Ω–µ —É–≤–∏–¥–µ–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - "
        "–Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—Éüëáüèº\n\n"
        "–í –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "–¢–µ–ª–µ–≥—Ä–∞–º: @sensei_vasilisa\n"
        "–ü–æ—á—Ç–∞: Vasilisa.sensei@yandex.ru"
    )
    subscription_is_activated = (
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞)\n"
        "–ü–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ "
        "—è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–ª–µ–Ω–≥-–∫–ª—É–± üòâ"
    )
    telegram_id_already_has_phone = (
        "–ö —Ç–≤–æ–µ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º id —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä, –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    check_payment_text = "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–ª–∞—Ç..."
    with create_session() as session:
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if phone_number:
                update.message.reply_text(check_payment_text)
                user = (
                    session.query(User)
                    .filter(User.phone_number == phone_number)
                    .first()
                )
                if not user:
                    update.message.reply_text(not_found_text)
                    return None
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
                # –∫ –∫–∞–∫–æ–º—É-–ª–∏–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
                if not user.telegram_id:
                    user_from_id = (
                        session.query(User)
                        .filter(User.telegram_id == update.message.chat_id)
                        .first()
                    )
                    if user_from_id:
                        update.message.reply_text(telegram_id_already_has_phone)
                        return None
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º id –∏ —Ç–µ–ª–µ–≥—Ä–∞–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.telegram_id = update.message.chat_id
                if update.message.from_user.username:
                    user.user_link = f"https://t.me/{update.message.from_user.username}"
                session.commit()
                # –°–º–æ—Ç—Ä–∏–º, –æ–ø–ª–∞—á–µ–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
                nearest_subscription = (
                    session.query(Subscription)
                    .filter(Subscription.user_id == user.id)
                    .order_by(asc(Subscription.start_datetime))
                    .first()
                )
                if not nearest_subscription:
                    update.message.reply_text(not_found_text)
                    return None
                # –°–º–æ—Ç—Ä–∏–º, –Ω–∞—á–∞–ª–∞—Å—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
                if nearest_subscription.subscription_link:
                    chat_link = (
                        nearest_subscription.chat_link
                        if nearest_subscription.chat_link
                        else LINK_COMING_SOON
                    )
                    update.message.reply_text(
                        THESE_ARE_YOUR_LINKS.format(
                            invite_link=nearest_subscription.subscription_link,
                            chat_link=chat_link,
                        )
                    )
                    return None
                now = datetime.datetime.now()
                if (
                    now.day == 1
                    and 12 <= now.hour < 18
                    and nearest_subscription.start_datetime <= now
                ):
                    invite_link = create_invite_link(
                        context.bot, nearest_subscription.end_datetime, CHANNEL_ID
                    )
                    chat_link = create_invite_link(
                        context.bot, nearest_subscription.end_datetime, CHAT_ID
                    )
                    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–Ω–≤–∞–π—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if invite_link:
                        nearest_subscription.subscription_link = invite_link
                        session.commit()
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω–≤–∞–π—Ç–æ–º
                        context.bot.send_message(
                            chat_id=user.telegram_id,
                            text=TEXT_INVITATION.format(
                                invite_link=invite_link, chat_link=chat_link
                            ),
                        )
                        return None
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
                update.message.reply_text(subscription_is_activated)
                return None
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            telegram_id = update.message.from_user.id
            user = session.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                update.message.reply_text(
                    "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µüëáüèº, "
                    "–ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìû' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏."
                )
                return None
            update.message.reply_text(check_payment_text)
            # –°–º–æ—Ç—Ä–∏–º, –æ–ø–ª–∞—á–µ–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
            nearest_subscription = (
                session.query(Subscription)
                .filter(Subscription.user_id == user.id)
                .order_by(asc(Subscription.start_datetime))
                .first()
            )
            if not nearest_subscription:
                update.message.reply_text(not_found_text)
                return None
            if nearest_subscription.subscription_link:
                chat_link = (
                    nearest_subscription.chat_link
                    if nearest_subscription.chat_link
                    else LINK_COMING_SOON
                )
                update.message.reply_text(
                    THESE_ARE_YOUR_LINKS.format(
                        invite_link=nearest_subscription.subscription_link,
                        chat_link=chat_link,
                    )
                )
                return None
            now = datetime.datetime.now()
            if (
                now.day == 1
                and 12 <= now.hour < 18
                and nearest_subscription.start_datetime <= now
            ):
                invite_link = create_invite_link(
                    context.bot, nearest_subscription.end_datetime, CHANNEL_ID
                )
                chat_link = create_invite_link(
                    context.bot, nearest_subscription.end_datetime, CHAT_ID
                )
                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–Ω–≤–∞–π—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if invite_link:
                    nearest_subscription.subscription_link = invite_link
                    session.commit()
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω–≤–∞–π—Ç–æ–º
                    context.bot.send_message(
                        chat_id=telegram_id,
                        text=TEXT_INVITATION.format(
                            invite_link=invite_link, chat_link=chat_link
                        ),
                    )
                    return None
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
            update.message.reply_text(subscription_is_activated)
            session.commit()
        except Exception as error:
            session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏: {str(error)}")
            raise
        finally:
            Session.remove()  # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ üïë'
def get_subscription_period(update: Update, context: CallbackContext) -> None:
    telegram_id = update.message.from_user.id
    with create_session() as session:
        user_id = session.query(User.id).filter(User.telegram_id == telegram_id).first()
        if not user_id:
            update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
            return None
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –±–ª–∏–∂–∞–π—à—É—é –ø–æ–¥–ø–∏—Å–∫—É
        nearest_subscription = (
            session.query(Subscription)
            .filter(Subscription.user_id == user_id[0])
            .order_by(asc(Subscription.start_datetime))
            .first()
        )
        if not nearest_subscription:
            update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
            return None
        update.message.reply_text(
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ Sensei, for real!?: "
            f"{nearest_subscription.start_datetime.strftime('%d.%m.%Y')}-"
            f"{nearest_subscription.end_datetime.strftime('%d.%m.%Y')}"
        )
        session.commit()
    Session.remove()  # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä üì≤'
def show_linked_phone_number(update: Update, context: CallbackContext) -> None:
    telegram_id = update.message.from_user.id
    with create_session() as session:
        user = session.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
            return None
        update.message.reply_text(
            f"–ö —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–æ–º–µ—Ä: {user.phone_number}"
        )
    Session.remove()  # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è'
def get_technical_support(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n"
        "–¢–µ–ª–µ–≥—Ä–∞–º: @rogozin_ilya\n"
        "–ü–æ—á—Ç–∞: rogozin.il2399@gmail.com"
    )
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçüèº'
def write_review(update: Update, context: CallbackContext) -> None:
    telegram_id = update.message.from_user.id
    with create_session() as session:
        user = session.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—à—å—Å—è —á–ª–µ–Ω–æ–º —Å–ª–µ–Ω–≥ –∫–ª—É–±–∞.\n\n"
                "–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ —Ç—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—à—å—Å—è –∫ –Ω–∞—à–µ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ –±—É–¥–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å –Ω–∞–º–∏ —Å–≤–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!"
            )
            return None
        update.message.reply_text(
            "–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∞—Ç—å —Å–ª–µ–Ω–≥-–∫–ª—É–± –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! –ò –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–æ—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:)\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º! –ó–∞—Ä–∞–Ω–µ–µ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º!\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å '-'."
        )
        context.user_data["awaiting_review"] = True
    Session.remove()  # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /get_invitation
def get_invitation(update: Update, context: CallbackContext) -> None:
    get_subscription_link(update, context)
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è '–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —Å–ª–µ–Ω–≥-–∫–ª—É–±–∞ üñºÔ∏è'
def get_demo_version_of_club(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–ú–∞ —Ñ—Ä–µ–Ω–¥, –ø—Ä–∏–≤–µ—Ç!: –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é "
        "—Å–ª–µ–Ω–≥-–∫–ª—É–±–∞ ¬´Sensei, for real!?¬ª: https://t.me/+vynLcyHSc9Y4N2Ji"
    )
    return None
